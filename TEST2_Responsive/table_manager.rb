require 'csv'
require 'nokogiri'

class TableManager
  attr_accessor :content

### Initialize - Creating an empty array
  def initialize(content=nil)
    @content = []
  end

### CSV : convert data to HTML <a>tag with attributes  
 # Open CSV File and Save @content without empty cells
  def open_csv(file_name)
    CSV.foreach(file_name,
                :headers => true,
                :converters => :all,
                :header_converters => :symbol
                ) do |row|
      hash_row = row.to_hash # Make CSV data as hash
      # Get rid of blank cells - Putting all data into @content
      if hash_row[:product_links] != nil || hash_row[:cta_link] != nil
        @content << hash_row
      end
    end
  end 

  # Filtering links
  def filtering_links     
    @content.each_with_index do |c, i|
      # Validate URL - Only for CTA, as the product links are picked up from the website
      if !c[:cta].nil? && (c[:cta_link]).split(/\./).first != "http://www" 
        invalid_url = (c[:cta_link]).split(/\./)[1..-1] # If there is no http:// - When start with only 'www.'
        c[:cta_link] = invalid_url.unshift("http://www").join('.')
      else
        c[:cta_link]
      end
      c.delete_if { |k, v| v.nil? }# Delete Nil elements
    end
    @content # Return Content
    
  end

### HTML - Insert numbers into given table. 
  def table_cell_with_number(htmlfile, outputfile)
    text = File.read(htmlfile)
    # Save a string from a table generated by Photoshop 
    photoshop_table = text.match(/(<html>[.\n\r\s\S]*?)(<table)([.\s\S]*?)(id="Table_01")([.\n\r\s\S]*?)(<\/table>)([.\n\r\s\S]*?<\/html>)/)[0]
    # Used Nokogiri to access IMG elements
    photoshop_table_noko = Nokogiri::HTML(photoshop_table)
    # Created a new array for IMG urls 
    photoshop_images_array = photoshop_table_noko.xpath("//img").map { |img| img }
    # Making arrays for IMG's attributes 
    photoshop_attr_src = []
    photoshop_attr_alt = []
    photoshop_attr_width = []
    photoshop_attr_height = []
    # Putting images arrtibutes into each array
    photoshop_images_array.each do |image|
      photoshop_attr_src << image["src"]
      photoshop_attr_alt << image["alt"]
      photoshop_attr_width << image["width"]
      photoshop_attr_height << image["height"]

      # if image["alt"] != "N" && image["src"] != "images/spacer.gif" 
      #   photoshop_attr_src << image["src"]
      #   photoshop_attr_alt << image["alt"]
      #   photoshop_attr_width << image["width"]
      #   photoshop_attr_height << image["height"]
      # else
      #   photoshop_images_array.delete(image)
      # end
    end 

    # Get rid of phtoshop table from the input html
    text = text.gsub(/(<html>[.\n\r\s\S]*?)(<table)([.\s\S]*?)(id="Table_01")([.\n\r\s\S]*?)(<\/table>)([.\n\r\s\S]*?<\/html>)/,"")
    
    # Insert images into MY_TABLE's td
    my_table_noko = Nokogiri::HTML(text)
    my_table_noko.xpath("//td//img").each_with_index do |img, n|
      img["src"] = photoshop_attr_src[n]
      img["alt"] = photoshop_attr_alt[n]
      img["width"] = photoshop_attr_width[n]
      img["height"] = photoshop_attr_height[n]
    end 
    
    # Wrting the result
    File.open(outputfile, "w") {|out| out << my_table_noko } # No need to close the file when using the block for File class.
  end

  def cta_style(htmlfile, outputfile)
    text = File.read(htmlfile)
    my_new_table = Nokogiri::HTML(text)

  end 

  # Insert Links compared picture's number to link's order number
  def insert_links_with_numbers(output_file)
    html_string = File.read(output_file)
    # Inserting '#' links when the <img> has the alt attribute = picture numbers.
    html_string = html_string.gsub(/(<img.*alt=")(\d)(.*">)/, '<a href="\\2" target="_blank">\\1\\2" title="\\2\\3</a>')
    # html_string = html_string.gsub(/(<img.*alt=")(([A-Z])\w)(">)/, '\\1')

    # With this code, the links in CSV must be in order (same as photoshop slices)
    doc = Nokogiri::HTML(html_string)
    # Making a new array for Nokogiri alts - Picture's number should be same as link's number
    picture_number = doc.xpath("//a//img//@alt").map { |alt| alt.to_s }
    # Replace some IMGS to &nbsp;
    picture_number.each do |pic|
      if pic["alt"] === "N" || pic["src"] === "images/spacer.gif" 
        picture_number.delete(pic)
        puts pic
      else
        pic 
      end
    end 
    # # Inserting links.  
    # doc.xpath("//a").each_with_index do |a, i|
    #   a["href"] = @content[picture_number[i].to_i].values.last # Links
    # end   
    # # Changing alt & title tag to prodouct details. 
    # doc.xpath("//a//img").each_with_index do |img, n|
    #   img["title"] = @content[picture_number[n].to_i].values.first # Hover Text(title)
    #   img["alt"] = @content[picture_number[n].to_i].values.first # Alt text(alt)
    # end 

    # Wrting the result
    File.open(output_file, "w") {|out| out << doc }
  end 

  # Clean up the html and leave only a single table
  def last_clean_up(output_file)
    text = File.read(output_file)
    # Get rid of html tags
    text = text.gsub(/(.*[.\n\r\s\S]*?<body>)/,"")
    text = text.gsub(/(<\/body>[.\n\r\s\S]*?).*/,"")
    # Delete amp; for tracking the URL. 
    new_contents = text.gsub(/amp;/,"")
    # Keep &nbsp;
    new_contents = new_contents.gsub(/\&\#160\;/, "\&nbsp\;")
    # Wrting the result
    File.open(output_file, "w") {|out| out << new_contents }
  end   
end # END OF CLASS / TABLE MANAGER 


##########################################################################
########################### TESTING IT START #############################
#################### PRESS [command + B] TO TEST IT ######################
##########################################################################

# Initialize
t1 = TableManager.new
# Open CSV file
the_csv_file = Dir['*'].select {|x| x =~ /_.*(csv)/ }.sort.first
t1.open_csv(the_csv_file)
# Filter data and Convert data to <a>tag
t1.filtering_links
# Open HTML file(input) and wirte new HTML file(output)
the_input_file = Dir['*'].select {|x| x =~ /_.*(html)/ }.sort.first
t1.table_cell_with_number(the_input_file, 'test_output_F.html')
# Insert links with picture's number
t1.insert_links_with_numbers('test_output_F.html')
# Clean up the html and leave only a single table
t1.last_clean_up('test_output_F.html')

##########################################################################